import tensorflow as tf
from keras import layers

image_input = tf.keras.Input(shape=(256, 512, 3))
merged_branch = layers.Conv2D(
    input_shape = (256, 512, 3),
    output_shape = (128, 256, 32)
)(image_input)
merged_branch = layers.LeakyReLU()(merged_branch)
merged_branch = layers.Dropout(0.3)(merged_branch)
merged_branch = layers.Conv2D(
    input_shape = (128, 256, 32),
    output_shape = (128, 256, 64)
)(merged_branch)
merged_brach = layers.BatchNormalization()(merged_branch)
merged_branch = layers.LeakyReLU()(merged_branch)
merged_branch = layers.Dropout(0.3)(merged_branch)
merged_branch = layers.Conv2D(
    input_shape = (128, 256, 64),
    output_shape = (64, 128, 128)
)(merged_branch)
merged_branch = layers.BatchNormalization()(merged_branch)
merged_branch = layers.LeakyReLU()(merged_branch)
merged_branch = layers.Dropout(0.3)(merged_branch)
merged_branch = layers.Conv2D(
    input_shape = (64, 128, 128),
    output_shape = (64, 128, 256)
)(merged_branch)
merged_branch = layers.BatchNormalization()(merged_branch)
merged_branch = layers.LeakyReLU()(merged_branch)
merged_branch = layers.Dropout(0.3)(merged_branch)
merged_branch = layers.Conv2D(
    input_shape = (64, 128, 256),
    output_shape = (32, 64, 512)
)(merged_branch)
merged_branch = layers.BatchNormalization()(merged_branch)
merged_branch = layers.LeakyReLU()(merged_branch)
merged_branch = layers.Dropout(0.3)(merged_branch)
merged_branch = layers.Flatten()(merged_branch)

authenticity_output = layers.Dense(1)(merged_branch)
classification_output = layers.Dense(20, activation = 'softmax')(merged_branch)

discriminator = tf.keras.Model(inputs=image_input, outputs=[authenticity_output, classification_output])