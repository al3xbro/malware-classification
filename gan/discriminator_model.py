import keras
from keras import layers

def createDisciminator():
    image_input = layers.Input(shape=(256, 512, 3))

    merged_branch = layers.Conv2D(
        256, (3, 3),
        strides = (2, 2),
        input_shape = (256, 512, 3),
    )(image_input)
    merged_branch = layers.LeakyReLU()(merged_branch)
    merged_branch = layers.Dropout(0.3)(merged_branch)

    merged_branch = layers.Conv2D(
        256, (3, 3),
        strides = (2, 2),
        input_shape = (128, 256, 32),
    )(merged_branch)
    merged_branch = layers.BatchNormalization()(merged_branch)
    merged_branch = layers.LeakyReLU()(merged_branch)
    merged_branch = layers.Dropout(0.3)(merged_branch)

    merged_branch = layers.Conv2D(
        256, (3, 3),
        strides = (2, 2),
        input_shape = (128, 256, 64),
    )(merged_branch)
    merged_branch = layers.BatchNormalization()(merged_branch)
    merged_branch = layers.LeakyReLU()(merged_branch)
    merged_branch = layers.Dropout(0.3)(merged_branch)

    merged_branch = layers.Conv2D(
        256, (3, 3),
        strides = (2, 2),
        input_shape = (64, 128, 128),
    )(merged_branch)
    merged_branch = layers.BatchNormalization()(merged_branch)
    merged_branch = layers.LeakyReLU()(merged_branch)
    merged_branch = layers.Dropout(0.3)(merged_branch)

    merged_branch = layers.Conv2D(
        256, (3, 3),
        strides = (2, 2),
        input_shape = (64, 128, 256),
    )(merged_branch)
    merged_branch = layers.BatchNormalization()(merged_branch)
    merged_branch = layers.LeakyReLU()(merged_branch)
    merged_branch = layers.Dropout(0.3)(merged_branch)

    merged_branch = layers.Flatten()(merged_branch)
    authenticity_output = layers.Dense(1, activation = 'sigmoid')(merged_branch)
    classification_output = layers.Dense(23, activation = 'softmax')(merged_branch)

    discriminator = keras.Model(
        inputs=image_input, 
        outputs=[authenticity_output, classification_output]
    )

    discriminator.compile(
        loss = ['binary_crossentropy', 'sparse_categorical_crossentropy'],
        optimizer = keras.optimizers.Adam(lr = 0.0001, beta_1=0.5),
    )

    print(discriminator.summary())
    print()

    return discriminator